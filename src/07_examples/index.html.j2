{% set pageTitle = 'CGP - Example code' %}
{% set tocTitle = 'Example code' %}
{% set title_id = 'example' %}

{% extends "theme/template/base.html" %}


{% block content %}

{% macro url_example(name) -%}
https://github.com/drohmer/cgp_examples/tree/main/examples/{{name}}
{%- endmacro %}

<style>
    .title {
        margin-top: 2em;
        font-weight: bold;
    }
    .path {
        color: gray;
        font-size: 90%;
        margin-left: 1em;
        font-style: italic;
    }
    .wrap {
        margin-top: 0.5em;
    }
    .illustration {
        display: inline-block;
        border: 2px solid rgb(200,200,200);
        border-radius: 10px;
        padding: 5px;
    }
    .explanation {
        display: inline-block;
        width: calc(100% - 300px - 2em);
        vertical-align: top;
        color: rgb(80,80,80);
        margin-left: 0.5em;
    }
    @media (max-width: 950px) {
        .explanation{
            margin-top: 0.5em;
            display:block;
            width: 100%;
        }
    }
</style>

= Example codes

Several example code are provided on the cgp_example repository 
* **link::https://github.com/drohmer/cgp_examples[https://github.com/drohmer/cgp_examples]**.

::nl

Direct download: [link::https://imagecomputing.net/cgp/examples/cgp_examples.zip[cgp_examples.zip]] [link::https://imagecomputing.net/cgp/examples/cgp_examples.tar.gz[cgp_examples.tar.gz]]


<div class="entry">
<div class="title">
== Transparent billboards
</div>
<div class="path">
link::{{url_example('01_transparent_billboards')}}[examples/01_transparent_billboards]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('01_transparent_billboards')}}">
videoplay::assets/transparent_billboards.mp4[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
This code uses a shader to display partly transparent textures. The code illustrates this use to display complex foliage of a pine tree.
</div>
</div>
</div>



<div class="entry">
<div class="title">
== Marching Cube - Static
</div>
<div class="path">
link::{{url_example('02_marching_cubes/01_marching_cube_simple')}}[examples/02_marching_cubes/01_marching_cube_simple]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('02_marching_cubes/01_marching_cube_simple')}}">
img::assets/marching_cube_static.jpg[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
Example of simple marching cube applied to an arbitrary function (a blobby function here) within a fixed domain.
</div>
</div>
</div>

<div class="entry">
<div class="title">
== Marching Cube - Dynamic update
</div>
<div class="path">
link::{{url_example('02_marching_cubes/02_marching_cube_dynamic')}}[examples/02_marching_cubes/02_marching_cube_dynamic]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('02_marching_cubes/02_marching_cube_dynamic')}}">
videoplay::assets/marching_cube_dynamic.mp4[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
Example of marching cube updated dynamically when the field function is modified via the GUI. The surface is made of triangle soup (duplicated vertices on shared triangle edges), and the normals are obtained from the field gradients computed from finite differences.
The structures used in the example are more involved compared to the simple call to marching_cube, but it is compatible with more efficient update.
</div>
</div>
</div>


<div class="entry">
<div class="title">
== Shader deformation
</div>
<div class="path">
link::{{url_example('03_shaders/01_deformation')}}[examples/03_shaders/01_deformation]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('03_shaders/01_deformation')}}">
videoplay::assets/shader_deformation.mp4[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
This code shows a procedural deformation fully computed in the vertex shader. A regular flat grid is displayed at each frame, and a deformation is applied in the vertex shader based on a time variable.
</div>
</div>
</div>



<div class="entry">
<div class="title">
== Multi-texturing
</div>
<div class="path">
link::{{url_example('03_shaders/02_multi_texture')}}[examples/03_shaders/02_multi_texture]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('03_shaders/02_multi_texture')}}">
img::assets/multiple_textures.jpg[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
This code shows the use of a shader using two textures. The two textures are blended together in multiplying their respective color. The amount of blending is modified based on the (u,v) coordinates.
</div>
</div>
</div>


<div class="entry">
<div class="title">
== 2D Curve sketch
</div>
<div class="path">
link::{{url_example('04_sketch/02_2d_curve')}}[examples/04_sketch/02_2d_curve]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('04_sketch/02_2d_curve')}}">
videoplay::assets/curve_sketch.mp4[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
Example of direct curve sketching on screen. The sketch is done in the 2D space under an orthographic projection. Each sketched stroke is handled as a curve_dynamic_drawable.
</div>
</div>
</div>




<div class="entry">
<div class="title">
== Skybox
</div>
<div class="path">
link::{{url_example('05_environment_map/01_skybox')}}[examples/05_environment_map/01_skybox]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('05_environment_map/01_skybox')}}">
videoplay::assets/skybox.mp4[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
Simple use of the class skybox_drawable to display a skybox (using 6 textures) in your scene.
</div>
</div>
</div>





<div class="entry">
<div class="title">
== Environment map
</div>
<div class="path">
link::{{url_example('05_environment_map/02_environment_map')}}[examples/05_environment_map/02_environment_map]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('05_environment_map/02_environment_map')}}">
videoplay::assets/environment_mapping.mp4[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
This code shows the use of environment (/reflection) mapping. A "Skybox" is displayed in the background = a cube with a seamless environment texture that follows the user. And the main shape is displayed with a reflective mapping (the normal of the shape indicates which part of the texture is displayed).
</div>
</div>
</div>



<div class="entry">
<div class="title">
== Multi-Pass Image Filter
</div>
<div class="path">
link::{{url_example('06_multipass/01_image_filter')}}[examples/06_multipass/01_image_filter]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('06_multipass/01_image_filter')}}">
videoplay::assets/image_filter.mp4[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
This code shows a multi-pass render using a Frame Buffer. In a first pass a scene is render and stored as a texture. In the second pass, the image is filtered using a second derivative convolution kernel and displayed finally on screen.
</div>
</div>
</div>

<div class="entry">
<div class="title">
== Image Filter - Basic Effects
</div>
<div class="path">
link::{{url_example('06_multipass/02_image_filter_basic_effects')}}[examples/06_multipass/02_image_filter_basic_effects]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('06_multipass/02_image_filter_basic_effects')}}">
img::assets/image_effects.jpg[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
A selection of image-based effects applied in a two pass-rendering.
Each effect is generated by a shader that is dynamically loaded from the gui.
</div>
</div>
</div>

<div class="entry">
<div class="title">
== Multi-Pass chaining effects
</div>
<div class="path">
link::{{url_example('06_multipass/03_image_filters_chain')}}[examples/06_multipass/03_image_filters_chain]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('06_multipass/03_image_filters_chain')}}">
img::assets/image_effect_chain.jpg[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
This code shows a 3-pass rendering using two consecutive Frame Buffer and two consecutive image filters (gradient, and thickening).
</div>
</div>
</div>

<div class="entry">
<div class="title">
== Camera Fly Mode
</div>
<div class="path">
link::{{url_example('07_camera/01_camera_fly_mode')}}[examples/07_camera/01_camera_fly_mode]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('07_camera/01_camera_fly_mode')}}">
videoplay::assets/fly_mode.mp4[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
This code shows the possibility to navigate in a "fly-mode" using the key arrows: left/right/up/down.
</div>
</div>
</div>

<div class="entry">
<div class="title">
== Camera 2D Displacement 
</div>
<div class="path">
link::{{url_example('07_camera/02_camera_2d_displacement')}}[examples/07_camera/02_camera_2d_displacement]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('07_camera/02_camera_2d_displacement')}}">
img::assets/2d_displacement.jpg[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
This code shows the possibility to navigate on a 2D plan using standard game-like mode (arrows + mouse).
</div>
</div>
</div>


<div class="entry">
<div class="title">
== Instancing (basic)
</div>
<div class="path">
link::{{url_example('08_instancing/01_instancing_position')}}[examples/08_instancing/01_instancing_position]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('08_instancing/01_instancing_position')}}">
img::assets/instancing.jpg[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
This code shows an example of use of Instancing to display a large quantity of similar shapes. The positions of the instances are sent as additional data buffer to the shader.
</div>
</div>
</div>

<div class="entry">
<div class="title">
== Instancing (procedural)
</div>
<div class="path">
link::{{url_example('08_instancing/02_instancing_procedural')}}[examples/08_instancing/02_instancing_procedural]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('08_instancing/02_instancing_procedural')}}">
videoplay::assets/instancing_procedural.mp4[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
This code shows an example of use of Instancing to display a large number of similar shapes. In this example, the number of instances can be controled via the GUI, and the position/orientation and deformation of each blade of grass is procedurally computed in the shader, while the color is pre-computed.
</div>
</div>
</div>


<div class="entry">
<div class="title">
== Advanced OBJ Loader
</div>
<div class="path">
link::{{url_example('09_mesh_loading')}}[examples/09_mesh_loading]
</div>
<div class="wrap">
<div class="illustration">
<a href="{{url_example('09_mesh_loading')}}">
img::assets/obj_loader.jpg[width:100%; max-width:300px;]
</a>
</div>
<div class="explanation">
Example of use of the advanced obj loader using the external library <a href="https://github.com/tinyobjloader/tinyobjloader">tinyobj</a>.
Allows to load obj mesh files made of multiple parts with several textures.
</div>
</div>
</div>

{% endblock %}