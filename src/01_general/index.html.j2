{% set pageTitle = 'CGP' %}
{% set tocTitle = 'CGP' %}

{% extends "theme/template/base.html" %}


{% block content %}



<style>
    .comment {
        font-size: 90%;
        font-style: italic;
        color: gray;
        line-height: 1.3em;
    }

    .github-link:hover img{
        filter: contrast(40%) brightness(1.3);
    }

    .caption {
        font-style:italic;
        color: gray;
    }

    .none {
        display: none;
    }

</style>

= CGP - Computer Graphics Programming library


::[height:2em]::

::[display:flex; justify-content:space-around;]
::[width:45%; font-size:90%;]
code::[c++]
mesh cube = mesh_primitive_cube();
for(int k=0; k<cube.position.size(); ++k)
    cube.position[k] += 0.1f * cube.normal[k];

cube_drawable.initialize_data_on_gpu(cube);
cube_drawable.material.color = { 1,1,0 };

   // ----------------- //

draw(cube_drawable, environment);
draw_wireframe(cube_drawable, environment);
code::[-]
::

div::[]
img::assets/cgp_image.jpg[width:100%; max-width:200px;]
::

::

::[text-align:center]
::(.caption) Example of CGP code and associated 3D result. ::
::


== Download the library

div::[display:flex;]

div::[max-width:120px;](.github-link)
<a href="https://github.com/drohmer/CGP">img::assets/download_github.png[width:100%;]</a>
::

div::[]
* Source code available on github: **link::https://github.com/drohmer/CGP[https://github.com/drohmer/CGP]**
* __The library is provided under the link::https://github.com/drohmer/CGP/blob/main/LICENSE.md[MIT Open Source License]__.

::[height:1em;]::

* Or via direct download: [<a href="https://github.com/drohmer/cgp/archive/refs/heads/main.zip">cgp.zip</a>]

::

::


== CGP General Principles

CGP (__Computer Graphics Programming library__) is a **lightweight and minimalist C++ library using OpenGL to represent, animate, and interact in real time with 3D scenes**. 
<br> It features a set of simple structures and functions (vectors, matrices, mesh structures, transforms, camera, etc) that are simple to use and read. The objective is to save time compared to raw OpenGL coding, while preserving the fundamental logic and comprehension of high-performance Graphics. <br> <br>

The main objective of CGP is to provide
* - **Easy to use CG basic tools**. 
** ::(.comment) Provide common elements (3D vectors, transformations, etc.) with direct access to their degrees of freedom. ::
* - **Data and structure ready for simple real-time interaction and animation**. 
** ::(.comment) Lightweight structures that are bloat-free by default. :: 
** ::(.comment) Large elements stored contiguously in memory. :: 
** ::(.comment) No assumptions on the structure of animation loop (beyond the use of GLFW and ImGui for events and gui handling). :: 
* - **Source code which is easy to read and understand**. 
** ::(.comment) Most CGP structures don't have private internal state and restrict their parameters to the minimal needed set. ::
* - **Helping structures and functions that do not impose a framework**.
** ::(.comment) Code remains fully compatible with direct OpenGL calls. ::
** ::(.comment) Most structures are independant to each other without requiering object hierarchy relations. ::
** ::(.comment) Custom higher-level OOP structure can easily be added on top of CGP elements for specific projects. ::
* - **Code which is secured and easy to debug**. 
** ::(.comment) Buffers are bound checked by default, no direct pointer manipulation. ::


== Example of CGP usage

=== Default use

Import the header file "cgp/cgp.hpp" to access all functions and structure of CGP.

code::[c++]
#include "cgp/cgp.hpp"

// All cgp functions are in the namespace cgp::
using namespace cgp;

int main()
{
    // declare two 3D vectors and display their sum on command line
    vec3 a = {1,2,3};
    vec3 b = {4,5,6};

    std::cout<< a + b <<std::endl; // Displays 5 7 9
}
code::[-]

=== Example of advanced usage in teaching context

* - <a href="https://damienrohmer.com/data/teaching/2022_2023/x-inf585/index.html">3D Animation and Simulation course</a> - link::https://github.com/drohmer/inf443_practice_code[github page]
* - <a href="https://damienrohmer.com/data/teaching/2022_2023/x-inf443/practice/index.html">Introduction to 3D Graphics (fr)</a> - link::https://github.com/drohmer/inf585_lab_code[github page]



== Compiling CGP

The directory __library/__ contains the source code of CGP, while the directory __examples/__ contains a set of scene setup (ex. directory __examples/00_empty_3D_scene/__). <br>
Each example is an independant program with its own Makefile and/or CMakeLists.txt. <br>

::[height:1em;]::

If needed, a detailed tutorial on how to install your system and compile C++ code is available there:
* **link::https://imagecomputing.net/cgp/compilation[Detailed instructions for compiling CGP.]**

::[height:1em;]::

==== General dependencies

CGP requires a C++14 (>=) compatible compiler (CGG/CLang or a recent Visual Studio), and an OpenGL 3.3 (>=) compatible system. <br>
On Linux/MacOS, link::https://www.glfw.org/[GLFW] and link::https://www.freedesktop.org/wiki/Software/pkg-config/[pkgconfig] are expected to be installed on the system. Both can be installed using the standard packages of any distribution. 

==== Linux/MacOS

Assuming a command line opened in one of the example scene.
* ::(.comment) ex. cgp/example_compilation/ ::

<br>

__Method 1.__ Using the provided Makefile:
code::[c++]
$ make
$ ./[executable-name]
code::[-]

__Method 2.__ Using the provided CMakeLists.txt:
code::[c++]
$ mkdir build
$ cd build
$ cmake ..
$ make
$ ./[executable-name]
code::[-]

==== Windows


__Method 1.__ Create a Visual Studio project using CMake. The script `scripts/windows_cmake_visual.bat` is provided to automatize this generation. <br>

* __Once opened by Visual Studio, the project should be configured to compile and be executed directly without further setup. Make sure your Windows version is updated for Visual Studio to be able to compile correctly C++14.__


== General architecture

The library rely on basic C++ code with a few dependencies for OpenGL and the GUI
* __Only GLFW is an external dependencies on Unix system, otherwise all libraries are provided with the code__

* link::https://github.com/Dav1dde/glad[Glad] is used to load functions for OpenGL 3.3
* link::https://www.glfw.org/[GLFW] is used to create the window and handle mouse/key events
* link::https://github.com/ocornut/imgui[ImGUI] is used to handle the GUI widgets
* link::https://github.com/richgel999/jpeg-compressor[jpeg-compressor] used for JPEG, and link::https://github.com/lvandeve/lodepng[lodepng] for PNG images handling.

::[height:2em;]::

The library directories are as follow

* **library/cgp/**: Contains the actual source code of the CGP library: set of structures and functions to ease generating 3D scene.
*  **library/third_party/**: External library/dependencies used by CGP.
*  **examples/**: Provide a set of independant program illustrating example use cases of CGP library.










{% endblock %}